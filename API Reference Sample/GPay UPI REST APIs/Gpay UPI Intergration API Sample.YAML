openapi: 3.0.3
info:
  title: GPay UPI Integration API
  description: >
    API to manage users, payments, transactions, and bank accounts via UPI in GPay.
  version: 1.0.0

servers:
  - url: https://api.gpay.com/v1
    description: Production server
  - url: https://sandbox.api.gpay.com/v1
    description: Sandbox for testing

security:
  - BearerAuth: []

tags:
  - name: User
    description: User management operations
  - name: Payment
    description: Payment initiation and management

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid request parameters

    User:
      type: object
      required:
        - userId
        - name
        - mobile
      properties:
        userId:
          type: string
          example: user_12345
        name:
          type: string
          example: Leona Moretti
        mobile:
          type: string
          example: '+919876543210'
        email:
          type: string
          format: email
          example: leona@example.com

    PaymentRequest:
      type: object
      required:
        - fromUserId
        - toVPA
        - amount
        - transactionId
      properties:
        fromUserId:
          type: string
          example: user_12345
        toVPA:
          type: string
          description: Virtual Payment Address of the receiver
          example: dario@upi
        amount:
          type: number
          format: float
          example: 1500.50
        transactionId:
          type: string
          example: txn_987654321
        note:
          type: string
          example: Dinner payment

    PaymentResponse:
      type: object
      properties:
        transactionId:
          type: string
          example: txn_987654321
        status:
          type: string
          enum:
            - SUCCESS
            - PENDING
            - FAILED
          example: SUCCESS
        timestamp:
          type: string
          format: date-time
          example: '2025-05-21T10:15:30Z'

    BankAccount:
      type: object
      required:
        - bankAccountId
        - userId
        - accountNumber
        - ifscCode
        - bankName
      properties:
        bankAccountId:
          type: string
          example: ba_1234
        userId:
          type: string
          example: user_12345
        accountNumber:
          type: string
          example: 123456789012
        ifscCode:
          type: string
          example: HDFC0001234
        bankName:
          type: string
          example: HDFC Bank

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - Authentication failed or missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

paths:

  /users:
    get:
      tags:
        - User
      summary: Lists users
      description: Retrieves the details of users. Control the number of results displayed and offset using the parameters.
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of users to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Offset for pagination
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - User
      summary: Creates a new user
      description: Creates a new user object using the details provided in the request body.
      requestBody:
        description: "Provide the following user details to create new user object: <ui> <li>userId: System generated unique identifier for user </li> <li> name: First and last names of user </li> <li> mobile: 10 digit unique phone with area code </li> <li> email: Email address of user.</li></ui>"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  /users/{userId}:
    get:
      tags:
        - User
      summary: Retrieves user by ID
      description: "Retrieves details of the user associated with the ID provided in the parameter."
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID associated with user to return
      responses:
        '200':
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - User
      summary: Updates user details
      description: Updates details of user associated with the ID provided in the parameter. Provide details to be updated in the request body.
      parameters:
        - name: userId
          description: ID associated with user
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: "Provide user details to updated. Following details can be updated: <ui> <li>name: First and last names of user </li> <li> mobile: 10 digit unique phone with area code </li> <li> email: Email address of user.</li></ui>"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags:
        - User
      summary: Deletes user by ID
      description: Deletes the user object associated with ID provided in the parameter.
      parameters:
        - name: userId
          description: ID associated with user object to be deleted
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /payments:
    post:
      tags:
        - Payment
      summary: Initiate a payment
      description: Initiates a UPI payment of a given amount from a user to virtual payment address as defined in the request body. A note containing purpose of the transaction can also be attached with the payment. The API attaches a system generated unique ID to the transaction.
      requestBody:
        description: "Provide the following details to initiate a payment: <ui><li>fromUserId: ID of the user initiating the payment </li> <li> toVPA: Virtual Payment Address to send the payment to </li> <li> amount: Amount to be paid to the Virtual Payment Address defined in <i>toVPA</i> </li><li>transactionId: System generated unique identifier for the transaction </li><li>note: User added note about purpose of transaction</li></ui>"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '201':
          description: Payment initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          description: Payment failed due to insufficient balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  